---
# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: ellucian-clair

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

package:
  include:
    - handler.py
    - klar
  exclude:
    - ./**
    - .

provider:
  name: aws
  runtime: python3.6
  timeout: 300
  stage: ${opt:stage, file(deploy.yml):STAGE}
  region: ${opt:region, env:AWS_DEFAULT_REGION}
  environment:
    STAGE: ${opt:stage, file(deploy.yml):STAGE}
    BUCKET: clair-${self:provider.stage}-scan-results
    CLAIR_ADDR: {"Fn::Join": [":", [{"Fn::GetAtt": ["ClairInstance", "PrivateDnsName"] }, "6060"]]}
  stackTags:
    Environment: ${file(deploy.yml):Environment}
    Service: ${file(deploy.yml):Service}
    CostCenter: ${file(deploy.yml):CostCenter}
    POC: ${file(deploy.yml):POC}



  iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "ssm:GetParameter"
        Resource: [
            {"Fn::Join": ["/", [{"Fn::Join": [":", ["arn:aws:ssm", "#{AWS::Region}", "#{AWS::AccountId}", "parameter"]]}, {"Ref": "DBHost"}]]},
            {"Fn::Join": ["/", [{"Fn::Join": [":", ["arn:aws:ssm", "#{AWS::Region}", "#{AWS::AccountId}", "parameter"]]}, {"Ref": "DBPasswordSSM"}]]},
            {"Fn::Join": ["/", [{"Fn::Join": [":", ["arn:aws:ssm", "#{AWS::Region}", "#{AWS::AccountId}", "parameter"]]}, {"Ref": "ClairConfig"}]]}
          ]
      - Effect: "Allow"
        Action:
            - "ecr:*"
        Resource: "*"
      - Effect: "Allow"
        Action:
            - "s3:*"
        Resource: [{"Fn::GetAtt": ["Bucket", "Arn"]}, {"Fn::Join": ["/", [{"Fn::GetAtt": ["Bucket", "Arn"]}, "*"]]}]
  vpc:
    securityGroupIds: [{"Ref": "DBUsers"}]
    subnetIds: ${file(deploy.yml):private_subnets}


functions:
  create_database:
    handler: handler.create_database
  create_table:
    handler: handler.create_table
  record_layers:
    handler: handler.record_layers
  read_layers:
    handler: handler.read_layers
  get_images_for_layer:
    handler: handler.get_images_for_layer
  shane:
    handler: handler.shane
  index_image:
    handler: handler.index_image

custom:
  pythonRequirements:
    dockerizePip: non-linux
  pseudoParameters:
    skipRegionReplace: true  # don't replace strings that look like regions, only replace #{} markers

resources:
  Parameters:
    DBPassword:
      Type: String
      NoEcho: true
      Default: "${file(deploy.yml):db_password}"
  Resources:
    Bucket:
      Type: AWS::S3::Bucket
      Properties:
        AccessControl: BucketOwnerFullControl
        BucketName: clair-${self:provider.stage}-scan-results
        Tags:
            -
              Key: Environment
              Value: ${file(deploy.yml):Environment}
            -
              Key: Service
              Value: ${file(deploy.yml):Service}
            -
              Key: CostCenter
              Value: ${file(deploy.yml):CostCenter}
            -
              Key: POC
              Value: ${file(deploy.yml):POC}

    DBSubnetGroup:
      Type: AWS::RDS::DBSubnetGroup
      Properties:
        DBSubnetGroupDescription: Subnet group for Clair vulnerability scanner postgres db
        DBSubnetGroupName: clair-${self:provider.stage}
        SubnetIds: ${file(deploy.yml):private_subnets}
        Tags:
          -
            Key: Environment
            Value: ${file(deploy.yml):Environment}
          -
            Key: Service
            Value: ${file(deploy.yml):Service}
          -
            Key: CostCenter
            Value: ${file(deploy.yml):CostCenter}
          -
            Key: POC
            Value: ${file(deploy.yml):POC}
    DBUsers:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupName: clair-${self:provider.stage}-db-users
        GroupDescription: Allows access to the clair postgres db
        VpcId: ${file(deploy.yml):vpc_id}
        Tags:
          -
            Key: Environment
            Value: ${file(deploy.yml):Environment}
          -
            Key: Service
            Value: ${file(deploy.yml):Service}
          -
            Key: CostCenter
            Value: ${file(deploy.yml):CostCenter}
          -
            Key: POC
            Value: ${file(deploy.yml):POC}

    ClairIn:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupName: clair-${self:provider.stage}-clair-in
        GroupDescription: Security group allowing access to clair
        VpcId: ${file(deploy.yml):vpc_id}
        SecurityGroupIngress:
          -
            FromPort: 6060
            ToPort: 6060
            IpProtocol: "tcp"
            SourceSecurityGroupId: {Ref: DBUsers}
        Tags:
          -
            Key: Environment
            Value: ${file(deploy.yml):Environment}
          -
            Key: Service
            Value: ${file(deploy.yml):Service}
          -
            Key: CostCenter
            Value: ${file(deploy.yml):CostCenter}
          -
            Key: POC
            Value: ${file(deploy.yml):POC}
    DbIn:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupName: clair-${self:provider.stage}-db-in
        GroupDescription: Security group allowing access to db
        VpcId: ${file(deploy.yml):vpc_id}
        SecurityGroupIngress:
          -
            FromPort: 5432
            ToPort: 5432
            IpProtocol: "tcp"
            SourceSecurityGroupId: {Ref: DBUsers}
        Tags:
          -
            Key: Environment
            Value: ${file(deploy.yml):Environment}
          -
            Key: Service
            Value: ${file(deploy.yml):Service}
          -
            Key: CostCenter
            Value: ${file(deploy.yml):CostCenter}
          -
            Key: POC
            Value: ${file(deploy.yml):POC}

    DBHost:
      Type: "AWS::SSM::Parameter"
      Properties:
        Name: clair-${self:provider.stage}-db-host
        Description: host
        Type: String
        Value: {"Fn::GetAtt": ["RDSInstance", "Endpoint.Address"]}

    ClairConfig:
      Type: "AWS::SSM::Parameter"
      Properties:
        Name: clair-${self:provider.stage}-clair-config
        Description: host
        Type: String
        Value: "${file(config.js)}"

    DBPasswordSSM:
      Type: "AWS::SSM::Parameter"
      Properties:
        Name: clair-${self:provider.stage}-db-password
        Description: password
        Type: String
        Value: {"Ref": "DBPassword"}

    RDSInstance:
      Type: "AWS::RDS::DBInstance"
      Properties:
        AllocatedStorage: 10
        CopyTagsToSnapshot: true
        DBInstanceClass: db.t2.small
        DBInstanceIdentifier: clair-${self:provider.stage}
        DBName: ClairDb
        Engine: postgres
        EngineVersion: 10.4
        DBSubnetGroupName: {Ref: DBSubnetGroup}
        VPCSecurityGroups: [{Ref: DbIn}]
        MasterUsername: postgres
        MasterUserPassword: {"Ref": "DBPassword"}
        MultiAZ: true
        MonitoringInterval: 0 #Not using enhanced monitoring. Regular RDS monitoring is still enabled.
        PubliclyAccessible: false
        StorageType: gp2
        Tags:
          -
            Key: Environment
            Value: ${file(deploy.yml):Environment}
          -
            Key: Service
            Value: ${file(deploy.yml):Service}
          -
            Key: CostCenter
            Value: ${file(deploy.yml):CostCenter}
          -
            Key: POC
            Value: ${file(deploy.yml):POC}

    ClairInstanceRole:
      Type: "AWS::IAM::Role"
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            -
              Effect: "Allow"
              Principal:
                Service:
                  - "ec2.amazonaws.com"
              Action:
                - "sts:AssumeRole"
        Path: "/"

    InstancePolicy:
      Type: AWS::IAM::Policy
      Properties:
        PolicyName: clair-${self:provider.stage}-instance
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            -
              Effect: "Allow"
              Action:
                - "ssm:GetParameter"
              Resource: [
                {"Fn::Join": ["/", [{"Fn::Join": [":", ["arn:aws:ssm", "#{AWS::Region}", "#{AWS::AccountId}", "parameter"]]}, {"Ref": "DBHost"}]]},
                {"Fn::Join": ["/", [{"Fn::Join": [":", ["arn:aws:ssm", "#{AWS::Region}", "#{AWS::AccountId}", "parameter"]]}, {"Ref": "DBPasswordSSM"}]]},
                {"Fn::Join": ["/", [{"Fn::Join": [":", ["arn:aws:ssm", "#{AWS::Region}", "#{AWS::AccountId}", "parameter"]]}, {"Ref": "ClairConfig"}]]}
              ]
            -
              Effect: "Allow"
              Action:
                  - "ecr:*"
              Resource: "*"
        Roles:
          -
            Ref: "ClairInstanceRole"

    ClairInstanceProfile:
      Type: "AWS::IAM::InstanceProfile"
      Properties:
        Path: "/"
        Roles:
          -
            Ref: "ClairInstanceRole"

    ClairLaunchTemplate:
      Type: AWS::EC2::LaunchTemplate
      Properties:
        LaunchTemplateName: clair-${self:provider.stage}
        LaunchTemplateData:
          ImageId: ami-04681a1dbd79675a5
          InstanceType: t2.medium
          IamInstanceProfile:
            Name: {"Ref": "ClairInstanceProfile"}
          SecurityGroupIds: [{"Ref": DBUsers}, {"Ref": ClairIn}]
          KeyName: sriddell
          UserData: {"Fn::Base64": "${file(userdata.js)}"}
          BlockDeviceMappings:
            -
              DeviceName: "/dev/xvda"
              Ebs:
                VolumeSize: 100
          TagSpecifications:
            -
              ResourceType: instance
              Tags:
                - Key: Name
                  Value: Clair
                -
                  Key: Environment
                  Value: ${file(deploy.yml):Environment}
                -
                  Key: Service
                  Value: ${file(deploy.yml):Service}
                -
                  Key: CostCenter
                  Value: ${file(deploy.yml):CostCenter}
                -
                  Key: POC
                  Value: ${file(deploy.yml):POC}
            -
              ResourceType: volume
              Tags:
                -
                  Key: Environment
                  Value: ${file(deploy.yml):Environment}
                -
                  Key: Service
                  Value: ${file(deploy.yml):Service}
                -
                  Key: CostCenter
                  Value: ${file(deploy.yml):CostCenter}
                -
                  Key: POC
                  Value: ${file(deploy.yml):POC}

    ClairInstance:
      Type: AWS::EC2::Instance
      Properties:
        LaunchTemplate:
          LaunchTemplateId: {"Ref": "ClairLaunchTemplate"}
          Version: {"Fn::GetAtt": ["ClairLaunchTemplate", "LatestVersionNumber"]}
        SubnetId: {"Fn::Select": ["0", "${file(deploy.yml):private_subnets}"]}




plugins:
  - serverless-pseudo-parameters
  - serverless-python-requirements
